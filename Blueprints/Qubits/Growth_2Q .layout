#!/usr/bin/layout
#name=XMon resonators
#help=Creates XMon resonator design

#include "../lib/wiring.layout"
#include "../lib/auxx.layout"
#include "../lib/layersSetup.layout"
#include "../lib/resonator.layout"
#include "../lib/feedline.layout"
#include "../lib/claw.layout"
#include "../lib/Xmon.layout"
#include "../lib/test_JJ.layout"
#include "../lib/alignment_mark.layout"
#include "qr_nbal.layout"
#include "../lib/Box_qubit_asymmetric.layout"
#include "../lib/Claw_3_and_2Box.layout"

        int M = 0;
        int M1 = 1;
	int jj_layer = 2;    
        int protect = 3;
        int ground = 4;
        int mask = 5;
        int total = 6;
        int aux = 7;
        int aux2 = 8;
        int aux3 = 9;
        int aux4 = 10;
        int bandage = 11;
	int aux5 = 12;
        
        int chip_height = 5e6;
        int chip_width = 10e6;
        int border=50e3;
        
        int feedlineDepth = chip_height/4;
        double É› = 11.45;
        double c = 299792458.0;

        doubleList res_freqs;        
        doubleList test_res_freqs;
        
        int w_res =7e3;
        int g_res = 4e3;
        int x = 5e3;
        int x_1 = 30e3;
        int tailLen = 1000e3;
        int w_thinGround = 5e3;
        int L_claw = 60e3;
        int w_claw = 20e3;
        
        int w_feed = 16e3;
        int g_feed = 8e3;
        int pad_len = 400e3;

        int w_q = 30e3;
        int g_q = 20e3;
        int arm_len = 0;
	int claw_gap = 5e3;
        doubleList asymmetries;

        int qrSize = 600e3;
        int qrCodePositionX = chip_width/2*11/10;
        int qrCodePositionY = chip_height/2*11/10;

	int central_L_claw = 400e3;
	int right_L_claw = 100e3;
	int left_L_claw = 200e3;

        int resTurnRad = 8*w_res;

	int  central_w_claw = 10e3;
	int  right_w_claw = 40e3;
	int  left_w_claw = 40e3;

	int q_length = 400e3;

int main() {
    setupLayers();
    layout->drawing->selectAll();
    layout->drawing->deleteSelect();
    layout->drawing->deselectAll();

        
    string sample_name = layout->getText("Sample name","Please enter the sample name:", "Growth_2Q");
    
        int i;
    
    cell *curCell = layout->drawing->currentCell;
    point cursor;
    
    intList segmentLengths;
    stringList directions;

    cursor.set(-chip_width/4+0.5e6, -chip_height/2);


	directions.append("u"); directions.append("r"); directions.append("d");
	segmentLengths.append(chip_height/2-tailLen-resTurnRad); segmentLengths.append(chip_width/2-1e6);
	segmentLengths.append(chip_height/2 -tailLen-resTurnRad);
	addFeedline(curCell, cursor, w_feed, g_feed, segmentLengths, directions, "cp"); 


   
    // Ground plane
    curCell->addBox(-chip_width/2, -(chip_height)/2, chip_width, chip_height, ground);
    
    int resonatorPositionsX = -chip_width/5;
    int resonatorPositionsY = -w_feed/2-g_feed-x+tailLen+resTurnRad;
    res_freqs.append(6);  res_freqs.append(6.1); res_freqs.append(6.2); 
    test_res_freqs.append(7); test_res_freqs.append(7.25);

    element* marker;
    point test_cursor = addResonator(curCell, newPoint(-chip_width/4+w_feed/2+g_feed+x_1+1000e3, -chip_height/6-resonatorPositionsY+473e3), w_res, g_res, test_res_freqs.at(0), 1e6, "r", 0);
    marker = curCell->addText(protect, newPoint(test_cursor.x()+200e3, test_cursor.y()), "TI");
    test_cursor = addResonator(curCell, newPoint(chip_width/4-w_feed/2-g_feed-x_1-2000e3, -chip_height/6-resonatorPositionsY+473e3), w_res, g_res, test_res_freqs.at(1), 1e6, "r", 0);
    marker = curCell->addText(protect, newPoint(test_cursor.x()+200e3, test_cursor.y()), "TII");
    
/*   for (i=0; i<6; i++){
        asymmetries.append(0+0.8/5*i);
    } */
         asymmetries.append(0.6); asymmetries.append(1); asymmetries.append(0+0.8/5*2); asymmetries.append(0);


    point cursor2;



  
    stringList directions; 
    intList segmentLengths; 

			w_thinGround = 25e3;
	  central_L_claw = 250e3;
	  central_w_claw = 40e3;

	cursor.set(-chip_width/8-350e3, -resonatorPositionsY);
	cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(0), tailLen, "u", "2");
	pointArray couplingPoints= addClaw_3(curCell,  cursor2 , "u");
	point cursor11 = addBoxQubit(curCell, couplingPoints.point(0), "l",  100,  180,0);
	point cursor12 = addBoxQubit(curCell, couplingPoints.point(1), "r",  100,  150,0);

    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor11.x()-100e3, cursor11.y()-100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor12.x()+100e3, cursor12.y()-100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor12.x()+100e3, cursor12.y()+100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor11.x()-100e3, cursor11.y()+100e3));

	cursor12 = newPoint(cursor12.x()-w_q-2*g_q-2*w_thinGround-central_w_claw/2,cursor12.y() +250e3);

			w_thinGround = 15e3;
		  central_L_claw = 300e3;
		  central_w_claw = 20e3;
	cursor.set(0, -resonatorPositionsY);
	cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(1), tailLen, "u","2");
	pointArray couplingPoints= addClaw_3(curCell,  cursor2 , "u");
	point cursor21 = addBoxQubit(curCell, couplingPoints.point(0), "l",  100,  180,0);
	point cursor22 = addBoxQubit(curCell, couplingPoints.point(1), "r",  100,  150,0);

    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor21.x()-100e3, cursor21.y()-100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor22.x()+100e3, cursor22.y()-100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor22.x()+100e3, cursor22.y()+100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor21.x()-100e3, cursor21.y()+100e3));

	cursor22 = newPoint(cursor22.x()-w_q-2*g_q-2*w_thinGround-central_w_claw/2,cursor22.y() +250e3);

			w_thinGround = 15e3;
		central_L_claw = 400e3;
		central_w_claw = 10e3;
	cursor.set(chip_width/8+350e3, -resonatorPositionsY);
	cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(2), tailLen, "u", "2");
	pointArray couplingPoints= addClaw_3(curCell,  cursor2 , "u");
	point cursor31 = addBoxQubit(curCell, couplingPoints.point(0), "l",  100,  180,0);
	point cursor32 = addBoxQubit(curCell, couplingPoints.point(1), "r",  100,  150,0);

    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor31.x()-100e3, cursor31.y()-100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor32.x()+100e3, cursor32.y()-100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor32.x()+100e3, cursor32.y()+100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(cursor31.x()-100e3, cursor31.y()+100e3)); 

	cursor31 = newPoint(cursor31.x()+w_q+2*g_q+2*w_thinGround+central_w_claw/2,cursor31.y() +250e3);


/*    stringList directions; 
    intList segmentLengths; 
    directions.append("l"); directions.append("d");directions.append("l"); 
    segmentLengths.append((chip_width/2 + cursor11.x())/2); segmentLengths.append(cursor11.y()+chip_height/4); 
    segmentLengths.append((chip_width/2 + cursor11.x())/2 );
    addFeedline(curCell, cursor11, w_res, g_res, segmentLengths, directions, "fb");

    stringList directions; 
    intList segmentLengths; 
    directions.append("r"); directions.append("d");directions.append("r"); 
    segmentLengths.append((chip_width/2 - cursor32.x())/2); segmentLengths.append(cursor32.y()+chip_height/4); 
    segmentLengths.append((chip_width/2 - cursor32.x())/2 );
    addFeedline(curCell, cursor32, w_res, g_res, segmentLengths, directions, "fb");

    stringList directions; 
    intList segmentLengths; 
    directions.append("u");directions.append("l"); 
    segmentLengths.append(-cursor12.y()+chip_height/4); 
    segmentLengths.append(chip_width/2 + cursor12.x() );
    addFeedline(curCell, cursor12, w_res, g_res, segmentLengths, directions, "md");

    stringList directions; 
    intList segmentLengths; 
    directions.append("u");directions.append("r"); 
    segmentLengths.append(-cursor31.y()+chip_height/4); 
    segmentLengths.append(chip_width/2 - cursor31.x() );
    addFeedline(curCell, cursor31, w_res, g_res, segmentLengths, directions, "md");

    stringList directions; 
    intList segmentLengths; 
    directions.append("l"); directions.append("u");directions.append("l"); directions.append("u");
    segmentLengths.append(chip_width/16 ); segmentLengths.append(chip_height/4-250e3+300e3); 
    segmentLengths.append(3*chip_width/16+ cursor21.x()) ; segmentLengths.append(-cursor21.y()+chip_height/4+250e3-300e3); 
    addFeedline(curCell, cursor21, w_res, g_res, segmentLengths, directions, "fb");


    stringList directions; 
    intList segmentLengths; 
    directions.append("u");directions.append("r"); directions.append("u");
    segmentLengths.append(chip_height/4+300e3-cursor22.y()); 
    segmentLengths.append(chip_width/4 - cursor22.x() ); segmentLengths.append(chip_height/4-300e3); 
    addFeedline(curCell, cursor22, w_res, g_res, segmentLengths, directions, "md");
*/


    curCell->textToPolygon(100e3);

    marker = curCell->addText(protect, newPoint(-chip_width/2+400e3, chip_height/2-400e3), sample_name);    
    curCell->textToPolygon(150e3);

    addTestSquid(curCell, newPoint(-chip_width/2+1.5e6, chip_height/2-0.9e6), 200, 100, "r", false, 0);
    addTestSquid(curCell, newPoint(chip_width/2-1.5e6, chip_height/2-0.9e6), 200, 100, "l", false, 0);
    addTestSquid(curCell, newPoint(-chip_width/2+1.5e6, -chip_height/2+0.9e6), 200, 100, "r", false, 0);
    addTestSquid(curCell, newPoint(chip_width/2-1.5e6, -chip_height/2+0.9e6), 200, 100, "l", false, 0);

    addAlignmentMark(curCell, newPoint(chip_width/2-0.5e6, -1.75e6));
    addGlobalAlignmentMarkBMSTU(curCell, newPoint(chip_width/2-0.65e6, -1.75e6+0.025e6));

    addAlignmentMark(curCell, newPoint(-chip_width/2+0.5e6, -1.75e6));
    addGlobalAlignmentMarkBMSTU(curCell, newPoint(-chip_width/2+0.65e6, -1.75e6+0.025e6));
    
    addAlignmentMark(curCell, newPoint(-chip_width/2+0.5e6, 1.75e6));
    addGlobalAlignmentMarkBMSTU(curCell, newPoint(-chip_width/2+0.65e6, 1.75e6-0.025e6)); 
    
    layout->booleanTool->boolOnLayer(ground, protect, mask, "A-B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(M, mask, total, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(M1, M1, total, "A+B", 0, 0, 0);
    clearLayer(curCell, M1); 
    
   // layout->booleanTool->boolOnLayer(protect, M, total, "A-B", 0, 0, 0);
 //   curCell->addBox(-chip_width/2-border, -chip_height/2-border, chip_width+border*2, chip_height+border*2, aux);
//    layout->booleanTool->boolOnLayer(aux, ground, total, "A-B", 0, 0, 0);
 //   clearLayer(curCell, aux); 

 //   addQR(curCell, qrCodePositionX,qrCodePositionY, qrSize, qrSize, aux); 

    
    int hd;
    layout->backgroundTool->clearBackground();
/*    hd = layout->backgroundTool->addBackground("background.png");*/
/*    layout->backgroundTool->backgroundOffset(hd, -5682e3, 2950e3);*/
/*    layout->backgroundTool->backgroundScale(hd, 8.3e3, 8.3e3);*/
    clearLayer(curCell, mask);
    clearLayer(curCell, M);
    clearLayer(curCell, protect);
    clearLayer(curCell, ground);
    //debug.show();
    //debug.clear();
    
    
    
}

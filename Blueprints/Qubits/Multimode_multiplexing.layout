#!/usr/bin/layout
#name=XMon resonators
#help=Creates XMon resonator design

#include "../lib/wiring.layout"
#include "../lib/auxx.layout"
#include "../lib/layersSetup.layout"
#include "../lib/resonator_multimode_reflection.layout"
#include "../lib/feedline.layout"
#include "../lib/claw.layout"
#include "../lib/Box_qubit.layout"
#include "../lib/test_JJ.layout"
#include "../lib/holes.layout"
#include "../lib/alignment_mark.layout"
#include "qr_m-mode_mplx.layout"

        int M = 0;
        int M1 = 1;
        int protect = 2;
        int ground = 3;
        int mask = 4;
        int total = 5;
        int aux = 6;
        int aux2 = 7;
        int aux3 = 8;
        int aux4 = 9;
        int error = 10;
	int bandage = 11;
	int aux5 = 12;
        
        int chip_height = 10e6;
        int chip_width = 5e6;
        int border=50e3;
        
        double É› = 11.45;
        double c = 299792458.0;

        doubleList relativeQubitPositions;
        
        int w_res =15e3;
        int g_res = 8.5e3;
        int x = 10e3;
        int frequency = 10; //GHz
        int mode_N = 15; // the highest used mode for which the frequency is specified
                
        int w_feed = 30e3;
        int g_feed = 15e3;
        
        int w_q = 45e3;
        int g_q = 20e3;
        int w_JJ = 200;
        int h_JJ = 100;
        int q_length = 300e3;
        int q_offset = g_res+g_q-12e3;

        int qrSize = 750e3;
        int qrCodePositionX = chip_width/2*9.5/10-qrSize;
        int qrCodePositionY = chip_height/2*9.5/10-qrSize;


int main() {
    setupLayers();
    layout->drawing->selectAll();
    layout->drawing->deleteSelect();
    layout->drawing->deselectAll();
	layout->drawing->activeLayer=error;
	layout->drcTool->setErrorLayerToActiveLayer();
    
    debug("New run below --------------------------------");



        
    string sample_name = layout->getText("Sample name","Please enter the sample name:", "M-M MPLX 1");
    
        int i;
    
    cell *curCell = layout->drawing->currentCell;
    point cursor;
    
    intList segmentLengths;
    stringList directions;
    directions.append("r");
    directions.append("d");
    directions.append("l");
    
    segmentLengths.append(1000e3);
    segmentLengths.append(chip_height/2);
    segmentLengths.append(1000e3);
    
    cursor.set(-chip_width/2, chip_height/4);
    pad_len = 400e3;
    addFeedline(curCell, cursor, w_feed, g_feed, segmentLengths, directions, "cp");

    cursor.set(cursor.x()+1000e3+g_feed+w_feed/2+x, 0);
    relativeQubitPositions.append(2./3.);//  relativeQubitPositions.append(0.8);     //qubitRelativePositions.append(0.1);

    pointArray qubitPositions = addResonator(curCell, cursor, w_res, g_res, frequency, mode_N, "r", relativeQubitPositions);
/*    debug(qubitPositions);*/
    
    pad_len  = 250e3;
      
    for (int i=0; i<qubitPositions.size(); i++) {
        point couplingPoint = newPoint(qubitPositions.point(i).x()+w_res/2+g_res-q_offset, qubitPositions.point(i).y());
        point cursor3 = addBoxQubit(curCell, couplingPoint, "r", w_JJ, h_JJ);
        
        point couplingPoint = newPoint(qubitPositions.point(i).x()-w_res/2-g_res+q_offset, qubitPositions.point(i).y());
        point cursor2 = addBoxQubit(curCell, couplingPoint, "l", w_JJ, h_JJ);
                
        stringList directions; 
        intList segmentLengths;
        if (i==1) {
            directions.append("r"); directions.append("u"); directions.append("l"); directions.append("u");
            segmentLengths.append(230e3); segmentLengths.append(chip_height/2-cursor2.y()-800e3); 
            segmentLengths.append(cursor3.x()+230e3); segmentLengths.append(800e3);
            addFeedline(curCell, cursor3, 7e3, 4e3, segmentLengths, directions, "fb");
        } else {
            directions.append("l"); directions.append("d"); directions.append("l"); directions.append("d");
            segmentLengths.append(230e3); segmentLengths.append(chip_height/2+cursor3.y()-800e3); 
            segmentLengths.append(cursor2.x()-230e3);segmentLengths.append(800e3);
            addFeedline(curCell, cursor2, 7e3, 4e3, segmentLengths, directions, "fb");
        }
    }
   
    element marker = curCell->addText(protect, newPoint(-chip_width/2+100e3, chip_height/2-100e3), sample_name);    
    curCell->textToPolygon(200e3);
    
    // Ground plane
    curCell->addBox(-chip_width/2, -(chip_height)/2, chip_width, chip_height, ground);
    
    addTestSquid(curCell, newPoint(-chip_width/2+0.5e6, chip_height/2-0.5e6), 200, 100, "l", false);
/*    addTestSquid(curCell, newPoint(chip_width/2-0.5e6, chip_height/2-2e6), 200, 100, "l", false);*/
    addTestSquid(curCell, newPoint(-chip_width/2+0.5e6, -chip_height/2+0.5e6), 200, 100, "l", false);
    addTestSquid(curCell, newPoint(chip_width/2-0.5e6, -chip_height/2+0.5e6), 200, 100, "l", false);
    
//    addHoles(curCell);
    
    addQR(curCell, qrCodePositionX,qrCodePositionY, qrSize, qrSize, protect);
    
    layout->booleanTool->boolOnLayer(ground, protect, mask, "A-B", 1, 1, 0);
    layout->booleanTool->boolOnLayer(M, mask, total, "A+B", 1, 1, 0);    
    

/*    layout->booleanTool->boolOnLayer(M1, total, total, "A+B", 0, 0, 0);*/
/*    clearLayer(curCell, M1);*/

/*    layout->booleanTool->boolOnLayer(protect, M, total, "A-B", 0, 0, 0);*/
/*    curCell->addBox(-chip_width/2-border, -chip_height/2-border, chip_width+border*2, chip_height+border*2, aux);*/
/*    layout->booleanTool->boolOnLayer(aux, ground, total, "A-B", 0, 0, 0);*/
/*    clearLayer(curCell, aux);*/

    
    int hd;
    layout->backgroundTool->clearBackground();
/*    hd = layout->backgroundTool->addBackground("background.png");*/
/*    layout->backgroundTool->backgroundOffset(hd, -5682e3, 2950e3);*/
/*    layout->backgroundTool->backgroundScale(hd, 8.3e3, 8.3e3);*/
    clearLayer(curCell, mask);
    clearLayer(curCell, M);
    clearLayer(curCell, protect);
    clearLayer(curCell, ground);
/*    debug.show();*/
/*    debug.clear();*/
    
    
    
}

#!/usr/bin/layout
#name=XMon resonators
#help=Creates XMon resonator design

#include "../lib/wiring.layout"
#include "../lib/auxx.layout"
#include "../lib/layersSetup.layout"
#include "../lib/resonator.layout"
#include "../lib/feedline.layout"
#include "../lib/claw.layout"
#include "../lib/Xmon_manhattan.layout"
#include "../lib/test_JJ_1.layout"
#include "../lib/alignment_mark.layout"
#include "qr_nbal.layout"
#include "../lib/Claw_3_and_2Box.layout"
#include "../lib/holes (2).layout"
#include "../lib/squid_manhattan.layout"

        int photo_neg = 9;
        int photo_neg_holed = 11;
        int photo_holed = 1;
        int M = 1000;
        int M1 = 1001;
        int jj_layer = 2;
        int protect = 1003;
        int ground = 1004;
        int mask = 1005;
        int total = 0;
        int aux = 1007;
        int aux2 = 1008;
        int aux3 = 1009;
        int aux4 = 1010;
        int bandage = 1011;
        int aux5 = 1012;
        int aux6 = 1013;
        int aux7 = 1014;
        int holes_v = 5;
        int holes_h = 4;
        int error = 115;

        int chip_height = 5e6;
        int chip_width = 10e6;
        int border=50e3;

        int feedlineDepth = chip_height/4;
        double ɛ = 11.45;
        double c = 299792458.0;

        doubleList res_freqs;
        doubleList test_res_freqs;

        int w_res =7e3;
        int g_res = 4e3;
        int x = 5e3;
        int tailLen = 1000e3;
        int w_thinGround = 5e3;
        int L_claw_right = 60e3;
        int L_claw_left= 60e3;
        int w_claw = 20e3;
        int claw_gap = 5e3;

        int w_feed = 16e3;
        int g_feed = 8e3;
        int pad_len = 400e3;
        int ground_connector_width = 100e3;
        int bridge_resonators = false;

        int w_q = 20e3;
        int g_q = 20e3;
        int arm_len = 300e3;
        int ebeam_overlap = 3e3;
        doubleList asymmetries;
        doubleList qubit_frequencies;
        doubleList Ics;
        doubleList qubit_square_equiv_JJ_size;
        double E_C = .242;
        double Ic_density = 0.5;  // uA/um2
        doubleList criticalCurrents;
        int photo_correction = 0;

        int qrSize = 600e3;
        int qrCodePositionX = chip_width/2*11/10;
        int qrCodePositionY = chip_height/2*11/10;

        string sample_name;

int main() {
    setupLayers();
    layout->drawing->selectAll();
    layout->drawing->deleteSelect();
    layout->drawing->deselectAll();


    sample_name = layout->getText("Sample name","Please enter the sample name:", "Mixed_fb");

        int i;

    cell *curCell = layout->drawing->currentCell;
    point cursor;

    intList segmentLengths;
    stringList directions;
    directions.append("r");

    segmentLengths.append(chip_width);
    cursor.set(-chip_width/2, 0);
    addFeedline(curCell, cursor, w_feed, g_feed, segmentLengths, directions, "cp");

    for (i=0; i<10; i++) {
        qubit_frequencies.append(6);
    }

    for (i=0; i<10; i++) {
        asymmetries.append(.5);
    }

    // Ground plane
    curCell->addBox(-chip_width/2, -(chip_height)/2, chip_width, chip_height, ground);

    int resonatorPositionsX = -chip_width/5;
    int resonatorPositionsY = -w_feed/2-g_feed-x;
    res_freqs.append(6); res_freqs.append(6.1); res_freqs.append(6.2); res_freqs.append(6.3); res_freqs.append(6.4); res_freqs.append(6.5);
    test_res_freqs.append(7); test_res_freqs.append(7.1);


    element* marker;
    point test_cursor = addResonator(curCell, newPoint(-chip_width/2+chip_width/6-150e3, -resonatorPositionsY+5*x), w_res, g_res, test_res_freqs.at(0), 0.5e6, "u", "0");
    marker = curCell->addText(protect, newPoint(test_cursor.x()+100e3, test_cursor.y()+550e3), "TI");
    test_cursor = addResonator(curCell, newPoint(chip_width/2-chip_width/6+400e3, resonatorPositionsY-5*x), w_res, g_res, test_res_freqs.at(1), 0.6e6, "d", "0");
    marker = curCell->addText(protect, newPoint(test_cursor.x()-400e3, test_cursor.y()-250e3), "TII");



    point cursor2;
    JJ_pads_len = 5.65e3;
    tailLen = 1000e3;
    L_claw_right = 90e3;
    L_claw_left = 90e3;

    cursor.set(resonatorPositionsX+chip_width/5-chip_width/4+420e3, -resonatorPositionsY);
    cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(0), tailLen, "u", "1");
    //	point cursor4 = addClaw(curCell,  newPoint(cursor2.x()+w_res/2, cursor2.y()), "l");
    point cursor4 = addClaw(curCell, newPoint(cursor2.x()+5e3/2, cursor2.y()), "l");
    point cursor5 = addClaw(curCell, newPoint(cursor2.x()-5e3/2, cursor2.y()), "r");
    cursor5.set(cursor5.x()+arm_len/2+g_q, cursor5.y()-arm_len/2-g_q);
    cursor5 =addXmon(curCell, cursor5, "u", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));
    cursor4.set(cursor4.x()-arm_len/2-g_q, cursor4.y()-arm_len/2-g_q);
    cursor4 = addXmon(curCell, cursor4, "u", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));

    stringList directions;
    intList segmentLengths;
    directions.append("u");
    segmentLengths.append(-cursor4.y()+chip_height/2);
    addFeedline(curCell, cursor4, w_res, g_res, segmentLengths, directions, "fb");

    stringList directions;
    intList segmentLengths;
    directions.append("u");
    segmentLengths.append(-cursor5.y()+chip_height/2);
    addFeedline(curCell, cursor5, w_res, g_res, segmentLengths, directions, "fb");


	 L_claw_right = 60e3;
	 L_claw_left= 60e3;
         tailLen = 1000e3;
        cursor.set(resonatorPositionsX+chip_width/5+chip_width/4+420e3, -resonatorPositionsY);
	cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(2), tailLen, "u", "1");
	point cursor4 = addClaw(curCell,  newPoint(cursor2.x()+5e3/2, cursor2.y()), "l");
        point cursor5 = addClaw(curCell,  newPoint(cursor2.x()-5e3/2, cursor2.y()), "r");

    cursor5.set(cursor5.x()+arm_len/2+g_q, cursor5.y()-arm_len/2-g_q);
    cursor5 =addXmon(curCell, cursor5, "u", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));
    cursor4.set(cursor4.x()-arm_len/2-g_q, cursor4.y()-arm_len/2-g_q);
    cursor4 = addXmon(curCell, cursor4, "u", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));

    stringList directions;
    intList segmentLengths;
    directions.append("u");
    segmentLengths.append(-cursor4.y()+chip_height/2);
    addFeedline(curCell, cursor4, w_res, g_res, segmentLengths, directions, "fb");

    stringList directions;
    intList segmentLengths;
    directions.append("u");
    segmentLengths.append(-cursor5.y()+chip_height/2);
    addFeedline(curCell, cursor5, w_res, g_res, segmentLengths, directions, "fb");




	 L_claw_right = 90e3;
	 L_claw_left= 90e3;
	cursor.set(-300e3, -resonatorPositionsY);
	cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(1), tailLen, "u", "1");
	point cursor4 = addClaw(curCell,  newPoint(cursor2.x()+5e3/2, cursor2.y()), "l");
    point cursor5 = addClaw(curCell,  newPoint(cursor2.x()-5e3/2, cursor2.y()), "r");

    cursor5.set(cursor5.x()+arm_len/2+g_q, cursor5.y()+arm_len/2+g_q);
    cursor5 = addXmon(curCell, cursor5, "d", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));
    cursor4.set(cursor4.x()-arm_len/2-g_q, cursor4.y()+arm_len/2+g_q);
    cursor4 = addXmon(curCell, cursor4, "d", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));




//жопа


	 L_claw_right = 90e3;
	 L_claw_left= 90e3;
        cursor.set(resonatorPositionsX+chip_width/5-chip_width/4-420e3, resonatorPositionsY);
	cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(3), tailLen, "d", "1");
	point cursor4 = addClaw(curCell,  newPoint(cursor2.x()+5e3/2, cursor2.y()), "l");
    point cursor5 = addClaw(curCell,  newPoint(cursor2.x()-5e3/2, cursor2.y()), "r");
	cursor5.set(cursor5.x()+arm_len/2+g_q, cursor5.y()+arm_len/2+g_q);
    cursor5 = addXmon(curCell, cursor5, "d", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));
	cursor4.set(cursor4.x()-arm_len/2-g_q, cursor4.y()+arm_len/2+g_q);
    cursor4 = addXmon(curCell, cursor4, "d", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));

    stringList directions;
    intList segmentLengths;
    directions.append("d");
    segmentLengths.append(cursor5.y()+chip_height/2);
    addFeedline(curCell, cursor5, w_res, g_res, segmentLengths, directions, "fb");


	 L_claw_right = 60e3;
	 L_claw_left= 60e3;
	 cursor.set(resonatorPositionsX+chip_width/5+chip_width/4-420e3, resonatorPositionsY);
        cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(5), 1000e3, "d", "1");
	point cursor4 = addClaw(curCell,  newPoint(cursor2.x()+5e2/2, cursor2.y()), "l");
        point cursor5 = addClaw(curCell,  newPoint(cursor2.x()-5e3/2, cursor2.y()), "r");
	cursor5.set(cursor5.x()+arm_len/2+g_q, cursor5.y()+arm_len/2+g_q);
        cursor5 = addXmon(curCell, cursor5, "d", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));
	cursor4.set(cursor4.x()-arm_len/2-g_q, cursor4.y()+arm_len/2+g_q);
       cursor4 = addXmon(curCell, cursor4, "d", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));

    stringList directions;
    intList segmentLengths;
    directions.append("d");
    segmentLengths.append(cursor5.y()+chip_height/2);
    addFeedline(curCell, cursor5, w_res, g_res, segmentLengths, directions, "fb");


	cursor.set(300e3, resonatorPositionsY);
	cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(4), tailLen, "d", "1");
	point cursor4 = addClaw(curCell,  newPoint(cursor2.x()+5e2/2, cursor2.y()), "l");
        point cursor5 = addClaw(curCell,  newPoint(cursor2.x()-5e3/2, cursor2.y()), "r");
	cursor5.set(cursor5.x()+arm_len/2+g_q, cursor5.y()+arm_len/2+g_q);
        cursor5 = addXmon(curCell, cursor5, "d", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));
	cursor4.set(cursor4.x()-arm_len/2-g_q, cursor4.y()+arm_len/2+g_q);
       cursor4 = addXmon(curCell, cursor4, "d", qubit_frequencies.at(0), E_C, 0, asymmetries.at(0));

//addHoles(curCell);



    curCell->textToPolygon(100e3);

    marker = curCell->addText(protect, newPoint(-chip_width/2+400e3, chip_height/2-400e3), sample_name);
    curCell->textToPolygon(150e3);
        JJ_pads_len = 4e3+5.65e3;
    addTestSquid(curCell, newPoint(-chip_width/2+0.8e6, 1.2e6), 140, 140, "u", false, 0.7);
    addTestSquid(curCell, newPoint(chip_width/2-0.8e6, 1.2e6), 140, 140, "u", false, 0.7);
    addTestSquid(curCell, newPoint(-chip_width/2+0.8e6, -1.2e6), 140, 140, "d", false, 0.7);
    addTestSquid(curCell, newPoint(chip_width/2-0.8e6, -1.2e6), 140,140, "d", false, 0.7);
/*    */
    addAlignmentMark(curCell, newPoint(chip_width/2-0.5e6, -1.75e6));
    addGlobalAlignmentMarkBMSTU(curCell, newPoint(chip_width/2-0.65e6, -1.75e6+0.025e6));

    addAlignmentMark(curCell, newPoint(-chip_width/2+0.5e6, -1.75e6));
    addGlobalAlignmentMarkBMSTU(curCell, newPoint(-chip_width/2+0.65e6, -1.75e6+0.025e6));

    addAlignmentMark(curCell, newPoint(-chip_width/2+0.5e6, 1.75e6));
    addGlobalAlignmentMarkBMSTU(curCell, newPoint(-chip_width/2+0.65e6, 1.75e6-0.025e6));

//addHoles(curCell);

   // layout->booleanTool->boolOnLayer(ground, protect, mask, "A-B", 0, 0, 0);
   // layout->booleanTool->boolOnLayer(M, mask, total, "A+B", 0, 0, 0);
    //layout->booleanTool->boolOnLayer(M1, total, total, "A+B", 0, 0, 0);
    //clearLayer(curCell, M1);

   layout->booleanTool->boolOnLayer(protect, M, total, "A-B", 0, 0, 0);
   curCell->addBox(-chip_width/2-border, -chip_height/2-border, chip_width+border*2, chip_height+border*2, aux);
   layout->booleanTool->boolOnLayer(aux, ground, total, "A-B", 0, 0, 0);

	layout->booleanTool->boolOnLayer(jj_layer, M1, jj_layer  , "A+B", 0, 0, 0);

   clearLayer(curCell, aux);
  //  clearLayer(curCell, aux5);


    int hd;
    layout->backgroundTool->clearBackground();
/*    hd = layout->backgroundTool->addBackground("background.png");*/
/*    layout->backgroundTool->backgroundOffset(hd, -5682e3, 2950e3);*/
/*    layout->backgroundTool->backgroundScale(hd, 8.3e3, 8.3e3);*/
    clearLayer(curCell, mask);
    clearLayer(curCell, M);
    clearLayer(curCell, protect);
    clearLayer(curCell, ground);
    clearLayer(curCell, aux5);

    //debug.show();
    //debug.clear();



}

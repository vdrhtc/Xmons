/*

    XMon qubit. Anchor point is on the protect of the arm towards the resonator.

*/
    int ebeam_overlap = 0e3;
    int JJ_pads_len = 5.65e3; // controls the width of the Dolan bridge
//    int ebeam_overlap = 2e3; // overlap of the ebeam pads in M1 with the M layer
    //corr = 30
point addSquidManhattan(cell* curCell, point anchorPoint, string direction,
                        int w_JJ, int h_JJ, int corr = 30, double asymmetry=0) {

    int bridge_width = 160;
    int structure_length = 14e3;
    int squid_width_top = 3e3;
    int squid_width_bottom = 5e3;
    int pad_width = 7e3;
    int top_pad_height = 2e3;
    int bottom_pad_height = 2e3;

    int small_lead_width = 1e3;
    int top_tiny_lead_length = 1e3;
    int bottom_tiny_lead_length = 1.4e3;
    int tiny_lead_outshoot = 1200;

    int JJ_delta_arm_len = 8e3;
    int JJ_arm_len = arm_len/2+JJ_delta_arm_len;

    int corr_l = corr;
    int corr_r = corr;
    if (asymmetry == 1) {
        corr_l = 0;
    }


    int left_w_JJ = h_JJ*math::sqrt(1-asymmetry)- corr_l;
    int left_h_JJ = math::sqrt(1-asymmetry)*w_JJ - corr_l;
    int right_w_JJ;
    int right_h_JJ;
    if (w_JJ > 150) {
        right_w_JJ = 1.5 * (1 + asymmetry) * h_JJ - corr_r;
        right_h_JJ = w_JJ/1.5 - corr_r;
    } else {
        right_w_JJ = (1 + asymmetry) * h_JJ/100*w_JJ - corr_r;
        right_h_JJ = 100 - corr_r;
    }
    string jjCell_name ="Squid:("+(left_w_JJ+corr_l);
    jjCell_name+= "x"+(left_h_JJ+corr_l);
    jjCell_name+=")";
    jjCell_name+="("+(right_w_JJ+corr_r);
    jjCell_name+="x"+(right_h_JJ+corr_r);
    jjCell_name+=")";
    jjCell_name+= "bridge:"+bridge_width;
    jjCell_name+= "d:"+asymmetry;
    jjCell_name+= "corr:"+corr;

    cell* curCellJJ;
    if (! layout->drawing->existCellname(jjCell_name)) {

        layout->drawing->newCell();
        layout->drawing->currentCell->cellName=jjCell_name;
        curCellJJ = layout->drawing->currentCell;


        //============ JJ pads ===========
        // =====  Top
        point cursor;
        cursor.set(0,structure_length/2);

        point cursor_ct = wire(curCellJJ, aux, cursor, "d", top_pad_height, pad_width, false, 1000);

        point cursor_top_tiny_lead_left;
        if (asymmetry != 1) {
            cursor.set(cursor_ct.x()-squid_width_top/2-small_lead_width/2,cursor_ct.y());
            cursor = wire(curCellJJ, aux, cursor, "d", (structure_length/2 - top_pad_height-left_h_JJ/2)/2,
                          small_lead_width, false, 500);
            cursor = wire(curCellJJ, aux, cursor, "d", (structure_length/2 - top_pad_height-left_h_JJ/2)/2,
                          small_lead_width/2, false, 250);

            cursor_top_tiny_lead_left = newPoint(cursor.x()+small_lead_width/2/2,cursor.y()-left_h_JJ/2);
        }

        cursor.set(cursor_ct.x()+squid_width_top/2+small_lead_width/2,cursor_ct.y());
        cursor = wire(curCellJJ, aux, cursor, "d", (structure_length/2 - top_pad_height-right_h_JJ/2)/2,
                      small_lead_width, false, 500);
        cursor = wire(curCellJJ, aux, cursor, "d", (structure_length/2 - top_pad_height-right_h_JJ/2)/2,
                      small_lead_width/2, false, 250);

        point cursor_top_tiny_lead_right = newPoint(cursor.x()-small_lead_width/2/2,cursor.y()-right_h_JJ/2);

       // =====  Bottom

        cursor.set(0,-structure_length/2);

        point cursor_cb = wire(curCellJJ, aux, cursor, "u",
                               bottom_pad_height, pad_width, false, 1000);

        point cursor_bottom_tiny_lead_left;
        if (asymmetry != 1) {
            cursor.set(cursor_cb.x()-squid_width_bottom/2-small_lead_width/2, cursor_cb.y());
            cursor = wire(curCellJJ, aux, cursor, "u",
                          (structure_length/2 - bottom_pad_height-bottom_tiny_lead_length)/2,
                          small_lead_width, false, 500);
            cursor_bottom_tiny_lead_left =
                     wire(curCellJJ, aux, cursor, "u",
                          (structure_length/2 - bottom_pad_height-bottom_tiny_lead_length)/2,
                          small_lead_width/2, false, 200);
        }

        cursor.set(cursor_cb.x()+squid_width_bottom/2+small_lead_width/2,cursor_cb.y());
        cursor = wire(curCellJJ, aux, cursor, "u", (structure_length/2 - bottom_pad_height-bottom_tiny_lead_length)/2,
                      small_lead_width, false, 500);
        point cursor_bottom_tiny_lead_right =
                 wire(curCellJJ, aux, cursor, "u", (structure_length/2 - bottom_pad_height-bottom_tiny_lead_length)/2,
                      small_lead_width/2, false, 200);

        // === Miter structure




        // ======== Josephson leads

        wire(curCellJJ, aux, cursor_top_tiny_lead_left, "l", top_tiny_lead_length+tiny_lead_outshoot, left_h_JJ);
        wire(curCellJJ, aux, cursor_top_tiny_lead_right, "r", top_tiny_lead_length+tiny_lead_outshoot, right_h_JJ);

        wire(curCellJJ, aux, cursor_bottom_tiny_lead_left, "u", bottom_tiny_lead_length - left_h_JJ/2 - bridge_width, left_w_JJ);
        wire(curCellJJ, aux, cursor_bottom_tiny_lead_right, "u", bottom_tiny_lead_length - right_h_JJ/2 - bridge_width, right_w_JJ);


        // ==== Merge aux structure to jj_layer

        layout->booleanTool->boolOnLayer(aux, aux, jj_layer, "A+B", 0, 0, 0);

        clearLayer(curCellJJ, aux);
        clearAllAuxiliaryAux(curCellJJ);

    } else {
        curCellJJ = layout->drawing->findCell(jjCell_name);
    }

    layout->drawing->setCell(sample_name);

    element *JJ_ref = curCell->addCellref(curCellJJ,
                                          newPoint(anchorPoint.x(),
                                                   anchorPoint.y()));
    JJ_ref->rotate(angleFromDirection(direction));

    point retPoint;
    retPoint.set(0, -arm_len-2*g_q);
    // retPoint.set(0, 0);
    retPoint = rotateVector(retPoint, anchorPoint, direction);

    return retPoint;
}


/*
    Adds a test squid.
*/

        int structure_padding = 20e3;
        int pad_side_len = 200e3;
        int ebeam_overlap = 2e3;
        int test_squid_counter = 1;

void addTestStripe(cell* curCell, point center, int w_stripe, int stripe_len, int overlap) {

    int total_w = 2*structure_padding+pad_side_len;
    int total_h = 2*structure_padding+2*pad_side_len+stripe_len;
    point corner = newPoint(center.x()-total_w/2, center.y()-total_h/2);
    curCell->addBox(corner.x(), corner.y(), total_w, total_h, protect);

    curCell->addBox(corner.x()+structure_padding, corner.y()+structure_padding, pad_side_len, pad_side_len, M);
    curCell->addBox(corner.x()+structure_padding, corner.y()+structure_padding+stripe_len+pad_side_len, pad_side_len, pad_side_len, M);

    point cursor; cursor.set(center.x(), center.y()-stripe_len/2-overlap);
    wire(curCell, M1, cursor, "u", stripe_len+2*overlap, w_stripe);
}

void addTestSquid(cell* curCell, point center, int w_JJ, int h_JJ, string direction="d", bool no_pads, double asymmetry=0) {

        int test_JJ_pads_len = 5.45e3;
        int JJ_delta_arm_len = 0;
	w_JJ = w_JJ - 30;
	h_JJ = h_JJ - 30;


    int total_w = 2*structure_padding+pad_side_len;
    int total_h = 3*structure_padding+2*pad_side_len;
    point corner = newPoint(center.x()-total_w/2, center.y()-total_h/2);
    curCell->addBox(corner.x(), corner.y(), total_w, total_h, aux4);

    element* marker = curCell->addText(protect, newPoint(center.x()+250e3, center.y()+100e3), roman(test_squid_counter));
    curCell->textToPolygon(100e3);
    test_squid_counter+=1;

    if(!no_pads) {
        curCell->addBox(corner.x()+structure_padding, corner.y()+structure_padding, pad_side_len, pad_side_len, aux3);
        curCell->addBox(corner.x()+structure_padding, corner.y()+2*structure_padding+pad_side_len, pad_side_len, pad_side_len, aux3);
    }
    point cursor;
    // Top
    cursor.set(center.x(), center.y()+structure_padding/2);
    point cursor2; cursor2.set(cursor.x(), cursor.y()+ebeam_overlap);

    point cursorBandage = newPoint(cursor2.x(), cursor2.y()+1.25e3); // ------\/
    wire(curCell, aux5, cursorBandage, "d", ebeam_overlap, 7.5e3); // bandage pad

    point cursor3 = wire(curCell, aux, cursor2, "d", (JJ_pads_len+ebeam_overlap)/2, 5e3); // the big pad
    wire(curCell, aux, cursor3, "d", (JJ_pads_len+ebeam_overlap)/2+1, 4e3);   // ----\/
    wire(curCell, aux2, cursor3, "d", (JJ_pads_len+ebeam_overlap)/2+1, 3.25e3); // these two are the narrow pads (after subtraction)

    cursor2.set(cursor2.x()-2e3+math::sqrt(1-asymmetry)*h_JJ/2, cursor2.y()-JJ_pads_len-ebeam_overlap);
    wire(curCell, aux, cursor2, "d", 1.4e3, math::sqrt(1-asymmetry)*h_JJ);
    cursor2.set(cursor2.x()+4e3-h_JJ*math::sqrt(1-asymmetry)/2 - h_JJ*math::sqrt(1+asymmetry)/2, cursor2.y());
    wire(curCell, aux, cursor2, "d", 1.4e3, h_JJ*math::sqrt(1+asymmetry));


    // =====  Bottom
    cursor.set(cursor.x()-4e3, cursor.y()-g_q+JJ_delta_arm_len-ebeam_overlap);

    point cursorBandage = newPoint(cursor.x()+4e3, cursor.y()); // ------\/
    wire(curCell, aux5, cursorBandage, "u", ebeam_overlap-1.25e3, 12e3); // bandage pad

    wire(curCell, aux, cursor, "u", JJ_pads_len+ebeam_overlap, 2e3);
    wire(curCell, aux2, newPoint(cursor.x()-0.25e3, cursor.y()+(JJ_pads_len+ebeam_overlap)/2), "u", (JJ_pads_len+ebeam_overlap)/2, 1.5e3);
    cursor.set(cursor.x()+2*4e3, cursor.y());
    wire(curCell, aux, cursor, "u", JJ_pads_len+ebeam_overlap, 2e3);
    wire(curCell, aux2, newPoint(cursor.x()+0.25e3, cursor.y()+(JJ_pads_len+ebeam_overlap)/2), "u", (JJ_pads_len+ebeam_overlap)/2, 1.5e3);

    cursor.set(cursor.x()-1e3, cursor.y()+ebeam_overlap+JJ_pads_len-w_JJ*math::sqrt(1+asymmetry)/2);
    wire(curCell, aux, cursor, "l", .9e3-60, w_JJ*math::sqrt(1+asymmetry));
    cursor.set(cursor.x()-6e3, cursor.y() - w_JJ*math::sqrt(1-asymmetry)/2 + w_JJ*math::sqrt(1+asymmetry)/2);
    wire(curCell, aux, cursor, "r", .9e3-60, w_JJ*math::sqrt(1-asymmetry));


    rotateLayer(curCell, aux, center, angleFromDirection(direction));
    rotateLayer(curCell, aux2, center, angleFromDirection(direction));
    rotateLayer(curCell, aux3, center, angleFromDirection(direction));
    rotateLayer(curCell, aux4, center, angleFromDirection(direction));

     // ==== Merge aux structure to protect, M and M1

    layout->booleanTool->boolOnLayer(aux3, aux3, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(aux4, aux4, protect, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(aux, aux2, jj_layer, "A-B", 0, 0, 2);

    rotateLayer(curCell, aux5, center, angleFromDirection(direction));
    layout->booleanTool->boolOnLayer(aux5, aux5, bandage, "A+B", 0, 0, 0);
    clearLayer(curCell, aux);
    clearLayer(curCell, aux5);
    clearAllAuxiliaryAux(curCell);



    addLocalAlignmentMarkBMSTU(curCell, newPoint(center.x()-150e3, center.y()-150e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(center.x()+150e3, center.y()-150e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(center.x()+150e3, center.y()+150e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(center.x()-150e3, center.y()+150e3));

}

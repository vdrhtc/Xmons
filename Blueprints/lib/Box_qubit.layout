/*

    XMon qubit. Anchor point is on the protect of the arm towards the resonator.

*/

 //   int JJ_pads_len = 5.45e3;
 int JJ_pads_len = 4e3+5.45e3;

point addBoxQubit(cell* curCell, point anchorPoint, string direction, int w_JJ, int h_JJ) {

//        int JJ_delta_arm_len = 8e3;
int JJ_delta_arm_len = 0;//8e3;
        int JJ_arm_len = 0;
//        int ebeam_overlap = 2e3;
int ebeam_overlap =3e3;
        point cursor;
    
    
    cursor.set(anchorPoint.x(), anchorPoint.y()-g_q);
    wire(curCell, aux2, cursor, "d", w_q, q_length); // M
    
    wire(curCell, aux, anchorPoint, "d", w_q+2*g_q-JJ_delta_arm_len, q_length+2*g_q); // protect

 //============ JJ pads ===========
   // =====  Top 
    cursor.set(cursor.x(), cursor.y()-w_q);
    point cursor2; cursor2.set(cursor.x(), cursor.y()+ebeam_overlap);

    
    point cursor3 = wire(curCell, aux3, cursor2, "d", 2*(JJ_pads_len+ebeam_overlap)/3, 6e3);
    wire(curCell, aux3, cursor3, "d", (JJ_pads_len+ebeam_overlap)/3+1, 5e3); 
    wire(curCell, aux4, cursor3, "d", (JJ_pads_len+ebeam_overlap)/3+1, 4e3);
    
    cursor2.set(cursor2.x()-2.5e3+w_JJ/2, cursor2.y()-JJ_pads_len-ebeam_overlap);
    wire(curCell, aux3, cursor2, "d", 1e3, w_JJ);
    cursor2.set(cursor2.x()+2*2.5e3-w_JJ, cursor2.y());
    wire(curCell, aux3, cursor2, "d", 1e3, w_JJ);
    
    
    // =====  Bottom
    cursor.set(cursor.x()-4e3, cursor.y()-g_q+JJ_delta_arm_len-ebeam_overlap);
    
    wire(curCell, aux3, cursor, "u", JJ_pads_len+ebeam_overlap, 2e3);
    wire(curCell, aux4, newPoint(cursor.x()-0.25e3, cursor.y()+(JJ_pads_len+ebeam_overlap)/2), "u", (JJ_pads_len+ebeam_overlap)/2, 1.5e3);
    cursor.set(cursor.x()+2*4e3, cursor.y());
    wire(curCell, aux3, cursor, "u", JJ_pads_len+ebeam_overlap, 2e3); // вторая половина
    wire(curCell, aux4, newPoint(cursor.x()+0.25e3, cursor.y()+(JJ_pads_len+ebeam_overlap)/2), "u", (JJ_pads_len+ebeam_overlap)/2, 1.5e3);
    cursor.set(cursor.x()-1e3, cursor.y()+ebeam_overlap+JJ_pads_len-h_JJ/2);
    wire(curCell, aux3, cursor, "l", 1e3, h_JJ);
    cursor.set(cursor.x()-6e3, cursor.y());
    wire(curCell, aux3, cursor, "r", 1e3, h_JJ);
    

    // ========Rotation =========
    
    rotateLayer(curCell, aux, anchorPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux2, anchorPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux3, anchorPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux4, anchorPoint, angleFromDirection(direction));
    
    // ==== Merge aux3-aux4 structure to M1, aux to protect, aux2 to M
    
    layout->booleanTool->boolOnLayer(aux, aux, protect, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(aux2, aux2, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(aux3, aux4, M1, "A-B", 0, 0, 0);
    clearLayer(curCell, aux);
    clearAllAuxiliaryAux(curCell);
    
    point retPoint;
    retPoint.set(0, -w_q-2*g_q+JJ_delta_arm_len);
    retPoint =  rotateVector(retPoint, anchorPoint, direction);

    return retPoint;
}

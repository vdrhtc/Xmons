/*

    XMon qubit. Anchor point is on the protect of the arm towards the resonator.

*/
  int ebeam_overlap = 0e3;
    int JJ_pads_len = 5.65e3; // controls the width of the Dolan bridge
//    int ebeam_overlap = 2e3; // overlap of the ebeam pads in M1 with the M layer
    //corr = 30
point addXmon(cell* curCell, point anchorPoint, string direction, int w_JJ, int h_JJ, int corr = 30, double asymmetry=0) {

  int bridge_width = 160;
  int structure_length = 16e3;
  int squid_width_top = 6.2e3;
  int squid_width_bottom = 4e3;
  int pad_width = 8e3;
  int small_lead_width = 0.65e3;
  int top_tiny_lead_length = 1e3;
  int bottom_tiny_lead_length = 1e3;
  int tiny_lead_outshoot = 1200;



        int JJ_delta_arm_len = 8e3;
        int JJ_arm_len = arm_len/2+JJ_delta_arm_len;
        point cursor;


    cursor.set(anchorPoint.x(), anchorPoint.y()-g_q);
    wire(curCell, aux3, anchorPoint, "d", arm_len+2*g_q, w_q+2*g_q);
    wire(curCell, aux2, cursor, "d", arm_len/2+JJ_arm_len, w_q);

    cursor.set(cursor.x()-arm_len/2-g_q, cursor.y()-arm_len/2);
    wire(curCell, aux3, cursor, "r", arm_len+2*g_q, w_q+2*g_q);
    cursor.set(cursor.x()+g_q, cursor.y());
    wire(curCell, aux2, cursor, "r", arm_len, w_q);
    point pos = cursor;
    rotateLayer(curCell, aux2, anchorPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux3, anchorPoint, angleFromDirection(direction));

    layout->booleanTool->boolOnLayer(aux2, aux2, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(aux3, aux3, protect, "A+B", 0, 0, 0);

    clearAllAuxiliaryAux(curCell);

    point retPoint = newPoint(0, -arm_len-2*g_q);
    point squidPoint = newPoint(retPoint.x(), retPoint.y()+structure_length/2 - squid_width_bottom/2);
    retPoint = rotateVector(retPoint, anchorPoint, direction);
    squidPoint = rotateVector(squidPoint, anchorPoint, direction);

    addSquidManhattan(curCell, squidPoint, direction,  w_JJ,  h_JJ,  corr,  asymmetry);

    addLocalAlignmentMarkBMSTU(curCell, newPoint(retPoint.x()-100e3, retPoint.y()-100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(retPoint.x()+100e3, retPoint.y()-100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(retPoint.x()+100e3, retPoint.y()+100e3));
    addLocalAlignmentMarkBMSTU(curCell, newPoint(retPoint.x()-100e3, retPoint.y()+100e3));
    return retPoint;
  }
